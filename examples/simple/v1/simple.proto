syntax = "proto3";
package examples.simple.v1;

// import our annotations
import "appsync/v1/appsync.proto";

// Example Simple service
service SimpleService {
    // Echo method returns a string argument
    rpc Echo(EchoRequest) returns (EchoResponse) {
        option(appsync.v1.method).resolves="Query.echo";
        option(appsync.v1.method).resolves="Query.echo_v2";
    };

    // ListProfiles
    rpc ListProfiles(ListProfilesRequest) returns (ListProfilesResponse) {
        option(appsync.v1.method).resolves = "Query.list_profiles";
    };

    // Version resolves to return a scalar string value
    rpc Version(VersionRequest) returns (VersionResponse) {
        option(appsync.v1.method).resolves="Query.latest_version";
    };
}

// Query describes the top-level query object 
message Query {
    // echo field is resolved by the rpc method above. the "response" type MUST match the field
    // type and method on the service MUST exist. The "Request" will be turned into arguments 
    // unless it's an empty message.
    EchoResponse echo = 1;
    // another field that has the same resolver
    EchoResponse echo_v2 = 3;

    // List profiles
    ListProfilesResponse list_profiles = 4;

    // version resolves to a scalar type. which requires a extra option to configure the 
    // field in the response type that will hold the resolving value.
    string latest_version = 2;
}

// Pagination provides a standard input for paginated results
message Pagination {
    // which page
    string page = 1;
}

// Input for the ListProfile rpc
message ListProfilesRequest { 
    // pagination input
    Pagination pagination = 1;
}
// Output for hte ListProfile rpc
message ListProfilesResponse { 
    // profile ids
    repeated string profile_ids = 1;
}

// EchoRequest sends a message to be echoed
message EchoRequest { 
    // message to echo
    string message = 1; 
};

// EchoResponse sends a message to be echoed
message EchoResponse {
    // returned message 
    string message = 1; 
};

// VersionRequests asks for the version
message VersionRequest {};

// VersionResponse returns the version
message VersionResponse {
    // the field that holds the actual version
    string version = 1; 
};