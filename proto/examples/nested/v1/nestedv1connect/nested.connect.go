// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: examples/nested/v1/nested.proto

package nestedv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/crewlinker/protoc-gen-appsync-go/proto/examples/nested/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PostServiceName is the fully-qualified name of the PostService service.
	PostServiceName = "examples.nested.v1.PostService"
)

// PostServiceClient is a client for the examples.nested.v1.PostService service.
type PostServiceClient interface {
	// Post listing method
	Posts(context.Context, *connect_go.Request[v1.PostsRequest]) (*connect_go.Response[v1.PostsResponse], error)
	// related posts from a single post
	RelatedPosts(context.Context, *connect_go.Request[v1.RelatedPostsRequest]) (*connect_go.Response[v1.RelatedPostsResponse], error)
}

// NewPostServiceClient constructs a client for the examples.nested.v1.PostService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &postServiceClient{
		posts: connect_go.NewClient[v1.PostsRequest, v1.PostsResponse](
			httpClient,
			baseURL+"/examples.nested.v1.PostService/Posts",
			opts...,
		),
		relatedPosts: connect_go.NewClient[v1.RelatedPostsRequest, v1.RelatedPostsResponse](
			httpClient,
			baseURL+"/examples.nested.v1.PostService/RelatedPosts",
			opts...,
		),
	}
}

// postServiceClient implements PostServiceClient.
type postServiceClient struct {
	posts        *connect_go.Client[v1.PostsRequest, v1.PostsResponse]
	relatedPosts *connect_go.Client[v1.RelatedPostsRequest, v1.RelatedPostsResponse]
}

// Posts calls examples.nested.v1.PostService.Posts.
func (c *postServiceClient) Posts(ctx context.Context, req *connect_go.Request[v1.PostsRequest]) (*connect_go.Response[v1.PostsResponse], error) {
	return c.posts.CallUnary(ctx, req)
}

// RelatedPosts calls examples.nested.v1.PostService.RelatedPosts.
func (c *postServiceClient) RelatedPosts(ctx context.Context, req *connect_go.Request[v1.RelatedPostsRequest]) (*connect_go.Response[v1.RelatedPostsResponse], error) {
	return c.relatedPosts.CallUnary(ctx, req)
}

// PostServiceHandler is an implementation of the examples.nested.v1.PostService service.
type PostServiceHandler interface {
	// Post listing method
	Posts(context.Context, *connect_go.Request[v1.PostsRequest]) (*connect_go.Response[v1.PostsResponse], error)
	// related posts from a single post
	RelatedPosts(context.Context, *connect_go.Request[v1.RelatedPostsRequest]) (*connect_go.Response[v1.RelatedPostsResponse], error)
}

// NewPostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostServiceHandler(svc PostServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/examples.nested.v1.PostService/Posts", connect_go.NewUnaryHandler(
		"/examples.nested.v1.PostService/Posts",
		svc.Posts,
		opts...,
	))
	mux.Handle("/examples.nested.v1.PostService/RelatedPosts", connect_go.NewUnaryHandler(
		"/examples.nested.v1.PostService/RelatedPosts",
		svc.RelatedPosts,
		opts...,
	))
	return "/examples.nested.v1.PostService/", mux
}

// UnimplementedPostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostServiceHandler struct{}

func (UnimplementedPostServiceHandler) Posts(context.Context, *connect_go.Request[v1.PostsRequest]) (*connect_go.Response[v1.PostsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("examples.nested.v1.PostService.Posts is not implemented"))
}

func (UnimplementedPostServiceHandler) RelatedPosts(context.Context, *connect_go.Request[v1.RelatedPostsRequest]) (*connect_go.Response[v1.RelatedPostsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("examples.nested.v1.PostService.RelatedPosts is not implemented"))
}
